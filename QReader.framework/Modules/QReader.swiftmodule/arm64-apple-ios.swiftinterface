// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.1 (swiftlang-1100.0.270.13 clang-1100.0.33.7)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name QReader
import AVFoundation
import Foundation
import MasterpassQRCoreSDK
import Swift
import UIKit
public protocol QRReaderViewControllerDelegate : AnyObject {
  func reader(_ reader: QReader.QRReaderViewController, didScanResult result: Swift.Result<QReader.QrCodeData, QReader.QrCodeError>)
  func readerDidCancel(_ reader: QReader.QRReaderViewController)
}
extension QRReaderViewControllerDelegate {
  public func readerDidCancel(_ reader: QReader.QRReaderViewController)
}
public protocol QRReaderViewDelegate : AnyObject {
  func reader(_ result: Swift.Result<QReader.QrCodeData, QReader.QrCodeError>)
}
public enum QrCodeError : Swift.Error {
  case invalidAccessToCamera
  case invalidQRCode
  case unknownError(Swift.Error?)
  public var errorDescription: Swift.String {
    get
  }
  public var errorCode: Swift.Int {
    get
  }
}
@objc final public class QRReaderViewController : UIKit.UIViewController {
  @objc @IBOutlet weak final public var cancelBarButton: UIKit.UIBarButtonItem?
  @objc @IBOutlet weak final public var cameraMessageLabel: UIKit.UILabel?
  @objc @IBOutlet weak final public var titleLabel: UIKit.UILabel?
  final public var cornersTintColor: UIKit.UIColor! {
    get
    set
  }
  final public var cameraLayerColor: UIKit.UIColor! {
    get
    set
  }
  final public var backgroundHeaderColor: UIKit.UIColor! {
    get
    set
  }
  final public var scanningBoxRatio: CoreGraphics.CGFloat! {
    get
    set
  }
  weak final public var delegate: QReader.QRReaderViewControllerDelegate?
  @objc override final public var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @objc get
  }
  @objc dynamic public init()
  @objc override final public func viewDidLoad()
  @objc override final public var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  final public func changeFlashImages(_ flashOnImage: UIKit.UIImage?, flashOffImage: UIKit.UIImage?)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc deinit
}
extension QRReaderViewController : QReader.QRReaderViewDelegate {
  final public func reader(_ result: Swift.Result<QReader.QrCodeData, QReader.QrCodeError>)
}
public struct QrCodeData : Swift.Encodable {
  public let storeName: Swift.String?
  public let terminalLabel: Swift.String?
  public let terminalId: Swift.String?
  public let amount: Swift.Int?
  public let currency: Swift.String?
  public let tipIndicator: Swift.Bool?
  public let qrCodeData: Swift.String?
  public let storeId: Swift.String?
  public let storeGroupId: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
}
@objc open class QRReaderView : UIKit.UIView {
  weak public var delegate: QReader.QRReaderViewDelegate?
  public var flashStatus: Swift.Bool! {
    get
    set
  }
  public var resumeScan: Swift.Bool! {
    get
    set
  }
  public var isRunning: Swift.Bool {
    get
  }
  public var cornersTintColor: UIKit.UIColor! {
    get
    set
  }
  public var cameraLayerColor: UIKit.UIColor! {
    get
    set
  }
  public var scanningBoxRatio: CoreGraphics.CGFloat! {
    get
    set
  }
  @objc override dynamic open func draw(_ rect: CoreGraphics.CGRect)
  @objc override dynamic open func didMoveToSuperview()
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
